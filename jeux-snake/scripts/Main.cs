using Godot;
using System.Collections.Generic;

// Classe principale - Orchestre tous les managers et g√®re la boucle de jeu.
// Responsabilit√© : Initialisation, game loop, d√©tection collisions, game over, score.
public partial class Main : Node2D
{
	// Constantes de la grille
	public const int CellSize = 20; // Taille d'une case en pixels
	public const int GridWidth = 30; // Largeur en cases (600px)
	public const int GridHeight = 20; // Hauteur en cases (400px)
	
	// Managers - S√©paration des responsabilit√©s
	private BackgroundManager backgroundManager; // G√®re le fond de grille
	private DeplacementManager deplacementManager; // G√®re les inputs directionnels
	private ObstacleManager obstacleManager; // G√©n√®re et d√©tecte les obstacles
	private FoodManager foodManager; // Spawne et d√©tecte la nourriture
	private UIManager uiManager; // Affiche scores et √©cran de game over
	
	// Snake - Donn√©es et visuels
	private List<Vector2> snake = new List<Vector2>(); // Positions des segments sur la grille
	private List<ColorRect> snakeRects = new List<ColorRect>(); // Repr√©sentations visuelles
	
	// Game State - Variables d'√©tat du jeu
	private float timer = 0; // Compteur pour le d√©placement automatique
	private float moveInterval = 0.15f; // Intervalle entre chaque d√©placement (150ms au d√©part)
	private int score = 0; // Score actuel
	private int highScore = 0; // Meilleur score de la session
	private bool isGameOver = false; // Bloque le jeu si true

	// M√©thode Godot appel√©e au lancement de la sc√®ne
	public override void _Ready()
	{
		InitializeGame();
	}

	// Initialise tous les managers et l'√©tat de d√©part du jeu.
	// Ordre important : Background ‚Üí UI ‚Üí Obstacles ‚Üí Snake ‚Üí Food
	private void InitializeGame()
	{
		// Background - Dessine la grille de fond
		backgroundManager = new BackgroundManager();
		AddChild(backgroundManager); // Ajoute √† l'arbre de sc√®ne
		backgroundManager.Initialize();
		
		// UI - Cr√©e le panneau de score en bas
		uiManager = new UIManager();
		AddChild(uiManager);
		uiManager.Initialize();
		
		// Obstacles - G√©n√®re 30 obstacles al√©atoires
		obstacleManager = new ObstacleManager();
		AddChild(obstacleManager);
		obstacleManager.Initialize();
		
		// Snake initial - 3 segments align√©s horizontalement
		// Position de d√©part : (15,10) = centre de la grille
		snake.Clear();
		snake.Add(new Vector2(15, 10)); // T√™te
		snake.Add(new Vector2(14, 10)); // Corps 1
		snake.Add(new Vector2(13, 10)); // Corps 2
		
		DrawSnake(); // Cr√©e les ColorRect pour chaque segment
		
		// Food - Spawne la premi√®re nourriture (√©vite snake et obstacles)
		foodManager = new FoodManager();
		AddChild(foodManager);
		foodManager.Initialize(snake, obstacleManager.GetObstaclePositions());
		
		// D√©placement - G√®re les inputs clavier
		deplacementManager = new DeplacementManager();
		AddChild(deplacementManager);
		
		// Reset des variables d'√©tat
		score = 0;
		isGameOver = false;
		uiManager.UpdateScore(score, ref highScore); // Affiche "Score: 0"
		
		GD.Print(" Jeu Snake lanc√© !");
	}

	// Boucle principale - Appel√©e √† chaque frame (60 FPS).
	// delta : temps √©coul√© depuis la derni√®re frame (‚âà0.016s √† 60 FPS)
	public override void _Process(double delta)
	{
		if (isGameOver) return; // Bloque la boucle si game over
		
		// Input - D√©tecte les touches directionnelles
		deplacementManager.HandleInput();
		
		// Timer - Accumule le temps pour d√©clencher le mouvement
		timer += (float)delta;
		if (timer < moveInterval) return; // Pas encore le moment de bouger
		timer = 0; // Reset du timer
		
		// Calculer nouvelle position de la t√™te
		Vector2 currentHead = snake[0]; // Position actuelle de la t√™te
		Vector2 newHead = deplacementManager.GetNextPosition(currentHead);
		
		// V√©rifier collisions (murs, obstacles, auto-collision)
		if (CheckCollisions(newHead))
			return; // Game over d√©tect√©, arr√™te le traitement
		
		// V√©rifier si la nourriture est mang√©e
		bool hasEaten = foodManager.CheckFoodEaten(newHead);
		
		// D√©placer le serpent - Ajoute nouvelle t√™te
		snake.Insert(0, newHead);
		
		if (hasEaten)
		{
			// Croissance : garde la queue (ne la supprime pas)
			score++;
			uiManager.UpdateScore(score, ref highScore);
			foodManager.SpawnFood(snake, obstacleManager.GetObstaclePositions());
			GD.Print($" Miam ! Score: {score}");
			
			// Acc√©l√©ration progressive - Tous les 5 points, r√©duit l'intervalle
			if (score % 5 == 0 && moveInterval > 0.05f) // Limite minimale : 50ms
			{
				moveInterval -= 0.01f; // R√©duit de 10ms
				GD.Print($" Vitesse augment√©e ! Intervalle: {moveInterval:F2}s");
			}
		}
		else
		{
			// Pas de nourriture : retire la queue pour simuler le mouvement
			snake.RemoveAt(snake.Count - 1);
		}
		
		UpdateSnake(); // Synchronise les visuels avec les donn√©es
	}

	// V√©rifie toutes les collisions possibles pour la nouvelle position.
	// newHead : position calcul√©e de la prochaine t√™te
	// Retourne : true si collision d√©tect√©e (d√©clenche game over)
	private bool CheckCollisions(Vector2 newHead)
	{
		// Collision mur - V√©rifie les limites de la grille
		if (newHead.X < 0 || newHead.X >= GridWidth || 
			newHead.Y < 0 || newHead.Y >= GridHeight)
		{
			GameOver(" Collision avec le mur !");
			return true;
		}
		
		// Collision obstacle - D√©l√®gue au ObstacleManager
		if (obstacleManager.CheckCollision(newHead))
		{
			GameOver(" Collision avec un obstacle !");
			return true;
		}
		
		// Auto-collision - La t√™te touche le corps
		if (snake.Contains(newHead))
		{
			GameOver(" Collision avec soi-m√™me !");
			return true;
		}
		
		return false; // Aucune collision
	}

	// D√©clenche la s√©quence de game over : affichage, attente, red√©marrage.
	// reason : message affich√© √† l'√©cran (ex: "üí• Collision avec le mur !")
	// async void : permet d'attendre 3 secondes sans bloquer Godot
	private async void GameOver(string reason)
	{
		isGameOver = true; // Stoppe la boucle _Process
		GD.Print($" {reason} | Score: {score}");
		
		// Masquer le jeu (garde seulement le fond)
		backgroundManager.Visible = true; // Fond reste visible
		obstacleManager.Visible = false;
		foodManager.Visible = false;
		
		// Masquer tous les segments du serpent
		foreach (var rect in snakeRects)
		{
			rect.Visible = false;
		}
		
		// Afficher l'√©cran de game over (attend 3 secondes)
		await uiManager.ShowGameOver(reason, score, highScore, snake.Count, obstacleManager.GetObstaclePositions().Count);
		
		// Nettoyer et red√©marrer
		ClearSnake();
		GetTree().ReloadCurrentScene(); // Recharge la sc√®ne Main.tscn
	}

	// Cr√©e les visuels initiaux du serpent (3 segments au d√©part).
	// Appel√© une seule fois dans InitializeGame().
	private void DrawSnake()
	{
		for (int i = 0; i < snake.Count; i++)
		{
			ColorRect rect = new ColorRect();
			rect.Size = new Vector2(CellSize - 2, CellSize - 2); // 18x18 pixels
			rect.Position = snake[i] * CellSize + Vector2.One; // Convertit grille ‚Üí pixels
			
			// T√™te en vert clair, corps en vert fonc√©
			if (i == 0)
				rect.Color = new Color(0.3f, 1.0f, 0.3f); // T√™te
			else
				rect.Color = new Color(0.2f, 0.8f, 0.2f); // Corps
			
			AddChild(rect);
			snakeRects.Add(rect);
		}
	}

	// Met √† jour les visuels apr√®s chaque d√©placement ou croissance.
	// Cr√©e de nouveaux segments si le serpent a grandi.
	private void UpdateSnake()
	{
		// Ajouter des ColorRect si le serpent a grandi (apr√®s manger)
		while (snakeRects.Count < snake.Count)
		{
			ColorRect rect = new ColorRect();
			rect.Size = new Vector2(CellSize - 2, CellSize - 2);
			rect.Color = new Color(0.2f, 0.8f, 0.2f); // Couleur de corps
			AddChild(rect);
			snakeRects.Add(rect);
		}
		
		// Synchroniser positions et couleurs de tous les segments
		for (int i = 0; i < snake.Count; i++)
		{
			snakeRects[i].Position = snake[i] * CellSize + Vector2.One;
			
			// Colorer la t√™te diff√©remment
			if (i == 0)
				snakeRects[i].Color = new Color(0.3f, 1.0f, 0.3f); // T√™te
			else
				snakeRects[i].Color = new Color(0.2f, 0.8f, 0.2f); // Corps
		}
	}

	// Supprime tous les segments du serpent (donn√©es + visuels).
	// Appel√© avant de red√©marrer la sc√®ne.
	private void ClearSnake()
	{
		foreach (var rect in snakeRects)
		{
			if (rect.IsInsideTree()) // V√©rifie que le n≈ìud existe encore
				rect.QueueFree(); // Suppression propre Godot
		}
		snakeRects.Clear();
		snake.Clear();
	}
}
